import { useState, useEffect } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { Inter } from 'next/font/google';
import styles from '../styles/Home.module.css';
import { PrismaClient } from '@prisma/client';
import Sidebar from '../components/partials/Sidebar';
import Header from '../components/partials/Header';
import Dashboard from '../components/dashboard';
import Footer from '../components/partials/Footer';
import Journal from "../components/journal";
import { defaultLayout } from '../helpers/data';
import { useApplicationData } from "../hooks/useApplicationData";
import { updateLayout, parseLayout } from "../helpers/selectors";

const inter = Inter({ subsets: ['latin'] })

export default function Home(props) {
  const { today, day, handleSetDay, data, setData, user, journalOpen, setJournalOpen, toggleJournal, handleCalNav } =
    useApplicationData();

  /**
   * Customize the Dashboard Layout
   */

  const [layout, setLayout] = useState(parseLayout(props.user.layout) || defaultLayout);

  const handleLayoutChange = async (layoutsObj) => {
    setLayout(layoutsObj);
    await updateLayout(user.id, {"layout": layoutsObj });
  }

  return (
    <>
      <Head>
        <title>ActiveJourney</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-screen flex-col bg-white text-body dark:bg-dark-14 dark:text-dark-body {styles.main}">
        <div className="flex-grow overflow-auto">
          <div className="flex flex-col order-2 sm:flex-row sm:order-1 h-full">
            <Sidebar toggleJournal={toggleJournal} />
            <main id="section-main" className="bg-slate-100 relative sm:mx-auto w-full h-full max-w-200 overflow-auto">
              <div className="flex h-full flex-col p-8 mb-6">
                <Header
                  pageTitle="Dashboard"
                  userName={user.first_name}
                />
                <Dashboard 
                  user={user}
                  today={today}
                  entries={props.entries}
                  water={props.water}
                  sleep={props.sleep}
                  energy={props.energy}
                  mood={props.mood}
                  day={day}
                  setDay={handleSetDay}
                  layout={layout}
                  dailyWater={props.dailyWater}
                  onLayoutChange={handleLayoutChange}
                  toggleJournal={toggleJournal}
                  handleCalNav={handleCalNav}
                />
                <Footer />
              </div>
            </main>
          </div>
        </div>
        {journalOpen && (
          <Journal 
            day={day}
            today={today}
            setDay={handleSetDay}
            onClose={toggleJournal}
            handleCalNav={handleCalNav}
          />
        )}
      </div>
    </>
  )
}

/* Data Fetching */
const prisma = new PrismaClient();

// Fetch all entries by metric
async function fetchSingleMetric(condition) {
  let result = await prisma.User_metric_data.findMany({ where: condition });
  result = JSON.parse(JSON.stringify(result));
  return result;
}

// Fetch all posts (in /pages/index.tsx)
export async function getServerSideProps() {

  const userid = 1;
  const user = await prisma.user.findUnique({
    where: {
      id: userid,
    },
    select: {
      id: true,
      first_name: true,
      last_name: true,
      email: true,
      layout: true,
    },
  });

  const now = Date.now();
  const lteVal = new Date(now);
  let dailyWater = await prisma.User_metric_data.findMany({
    where: { user_id: userid,
      metric_id: 1,
      date: {
        lte: lteVal
      }
    },
    include: {
      metrics: true }
  });
  dailyWater = JSON.parse(JSON.stringify(dailyWater));

  // const currDate = new Date();
  const mockCurrDate = '2023-05-04T07:00:00.000Z';
  let today  = await fetchSingleMetric({ date: mockCurrDate }); // Try using lteVal
  let water  = await fetchSingleMetric({ metric_id: 1 });
  let sleep  = await fetchSingleMetric({ metric_id: 2 });
  let energy = await fetchSingleMetric({ metric_id: 4 });
  let mood   = await fetchSingleMetric({ metric_id: 5 });

  let entries = await prisma.User_metric_data.findMany({
    where: { user_id: 1 },
    include: { metrics: true },
    take: 30
  });
  entries = JSON.parse(JSON.stringify(entries));

  return {
    props : {
      user,
      entries,
      water, 
      sleep, 
      energy,
      mood,
      dailyWater
    }
  }
}
