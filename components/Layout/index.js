import Head from 'next/head';
import Sidebar from '../partials/Sidebar';
import Header from '../partials/Header';
import Footer from '../partials/Footer';
import Journal from '../journal';
import React, { useState } from 'react';
import { useApplicationData } from '../../hooks/useApplicationData';
import { DataProvider } from '../../store/DataContext';

export default function Layout({ children, title, darkMode, toggleDarkMode }) {
  const { toggleJournal, journalOpen } = useApplicationData();

  return(<>
      <Head>
        <title>{title}</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <DataProvider>
        <div className={darkMode}>
          <div className='flex h-screen flex-col bg-white text-body dark:bg-dark-14 dark:text-dark-body {styles.main}'>
            <div className='flex-grow overflow-auto'>
              <div className='flex flex-col order-2 sm:flex-row sm:order-1'>
                <Sidebar 
                  darkMode={darkMode}
                  toggleJournal={toggleJournal}
                  toggleDarkMode={toggleDarkMode}
                />
                <main
                  id='section-main'
                  className='bg-slate-100 dark:bg-slate-950 relative w-full h-auto min-h-screen sm:ml-[75px]'
                >
                  <div className='flex h-full flex-col p-8 mb-6'>
                    <Header pageTitle={title} />
                    {React.Children.map(children, (child) => {
                      return React.cloneElement(child, {
                        toggleJournal: toggleJournal
                      });
                    })}
                    <Footer />
                  </div>
                </main>
              </div>
            </div>
            {journalOpen && (
              <Journal
                onClose={toggleJournal}
              />
            )}
          </div>
        </div>
      </DataProvider>
  </>)
}


export async function getServerSideProps () {
  const userid = 1
  const user = await prisma.user.findUnique({
    where: {
      id: userid
    },
    select: {
      id: true,
      first_name: true,
      last_name: true,
      email: true,
      layout: true,
      dark_mode: true,
    }
  })

  return {
    props: {
      user,
    }
  }
}
