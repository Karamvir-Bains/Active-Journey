import Head from 'next/head';
import Sidebar from '../partials/Sidebar';
import Header from '../partials/Header';
import Footer from '../partials/Footer';
import Journal from '../journal';
import { useEffect, useState } from 'react';
import { useApplicationData } from '../../hooks/useApplicationData';
import axios from 'axios';

export default function Layout({ children, title }) {
  const { toggleJournal, day, today, journalOpen, handleSetDay, handleCalNav } = useApplicationData();

  const [darkMode, setDarkMode] = useState(false);
  const [bodyClass, setBodyClass] = useState('light');

  useEffect(() => {
    const user = axios.get('/api/users/1')
      .then((res) => {
        console.log("Response: ", res.data)
        setDarkMode(JSON.parse(res.data.dark_mode));
      })
      .catch((err) => {
        console.log(err);
      })

  }, [])

  useEffect(() => {
    setBodyClass(darkMode == true ? 'light' : 'dark');
  }, [darkMode]);

  const handleDarkMode = async () => {
    setDarkMode(darkMode === true ? false : true);

    const data = {
      dark_mode: darkMode
    }

    try {
      const userid = 1;
      await fetch(`/api/users/${userid}/updateDarkMode`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
      });
    }
    catch (err) {
      console.log(err);
    }
  }

  return(<>
      <Head>
        <title>{title}</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className={bodyClass}>
        <div className='flex h-screen flex-col bg-white text-body dark:bg-dark-14 dark:text-dark-body {styles.main}'>
          <div className='flex-grow overflow-auto'>
            <div className='flex flex-col order-2 sm:flex-row sm:order-1'>
              <Sidebar 
                darkMode={darkMode}
                setDarkMode={handleDarkMode}
                toggleJournal={toggleJournal}
              />
              <main
                id='section-main'
                className='bg-slate-100 dark:bg-slate-950 relative w-full h-auto min-h-screen sm:ml-[75px]'
              >
                <div className='flex h-full flex-col p-8 mb-6'>
                  <Header pageTitle={title} />
                    {children}
                  <Footer />
                </div>
              </main>
            </div>
          </div>
          {journalOpen && (
            <Journal
              day={day}
              today={today}
              setDay={handleSetDay}
              onClose={toggleJournal}
              handleCalNav={handleCalNav}
            />
          )}
        </div>
      </div>
  </>)
}


export async function getServerSideProps () {
  const userid = 1
  const user = await prisma.user.findUnique({
    where: {
      id: userid
    },
    select: {
      id: true,
      first_name: true,
      last_name: true,
      email: true,
      layout: true,
      dark_mode: true,
    }
  })

  return {
    props: {
      user,
    }
  }
}
